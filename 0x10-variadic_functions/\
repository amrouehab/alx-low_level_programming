#include "variadic_functions.h"
#include <stdarg.h>

/**
 * print_all - Prints anything.
 * @format: List of types of arguments passed to the function.
 */
void print_all(const char * const format, ...)
{
    int i = 0;
    char *str;
    va_list args;

    va_start(args, format);

    while (format && format[i])
    {
        if (i > 0)
        {
            _putchar(',');
            _putchar(' ');
        }

        switch (format[i])
        {
            case 'c':
                _putchar(va_arg(args, int));
                break;
            case 'i':
                print_number(va_arg(args, int));
                break;
            case 'f':
                print_float(va_arg(args, double));
                break;
            case 's':
                str = va_arg(args, char *);
                if (str == NULL)
                    str = "(nil)";
                while (*str)
                    _putchar(*str++);
                break;
        }
        i++;
    }

    _putchar('\n');
    va_end(args);
}

/**
 * print_number - Helper function to print an integer using _putchar.
 * @num: The integer to print.
 */
void print_number(int num)
{
    if (num < 0)
    {
        _putchar('-');
        num = -num;
    }

    if (num == 0)
    {
        _putchar('0');
        return;
    }

    int temp = num;
    int digits = 0;

    while (temp > 0)
    {
        digits++;
        temp /= 10;
    }

    char str[digits];
    str[digits] = '\0';

    while (digits > 0)
    {
        str[--digits] = (num % 10) + '0';
        num /= 10;
    }

    for (char *p = str; *p != '\0'; p++)
        _putchar(*p);
}

/**
 * print_float - Helper function to print a float using _putchar.
 * @num: The float to print.
 */
void print_float(double num)
{
    int int_part = (int)num;
    double frac_part = num - int_part;
    int frac_digits = 6;

    if (num < 0)
    {
        _putchar('-');
        int_part = -int_part;
        frac_part = -frac_part;
    }

    print_number(int_part);
    _putchar('.');

    while (frac_digits--)
    {
        frac_part *= 10;
        _putchar((int)frac_part % 10 + '0');
        frac_part -= (int)frac_part;
    }
}

